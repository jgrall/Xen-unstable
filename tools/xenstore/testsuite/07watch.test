# Watch something, write to it, check watch has fired.
write /test contents

1 watch /test token
2 write /test contents2
expect 1:/test:token
1 waitwatch
1 ackwatch token
1 close

# Check that reads don't set it off.
1 watch /test token
expect 2:contents2
2 read /test
expect 1: waitwatch failed: Connection timed out
1 waitwatch
1 close

# mkdir, setperm and rm should (also tests watching dirs)
mkdir /dir
1 watch /dir token
2 mkdir /dir/newdir
expect 1:/dir/newdir:token
1 waitwatch
1 ackwatch token
2 setperm /dir/newdir 0 READ
expect 1:/dir/newdir:token
1 waitwatch
1 ackwatch token
2 rm /dir/newdir
expect 1:/dir/newdir:token
1 waitwatch
1 ackwatch token
1 close
2 close

# Changed in b594bb976a743d509f1ffabb5bc698874ab90d8f
## We don't get a watch from our own commands.
#watch /dir token
#mkdir /dir/newdir
#expect waitwatch failed: Connection timed out
#waitwatch
#close

# ignore watches while doing commands, should work.
watch /dir token
1 write /dir/test contents
expect contents
read /dir/test
expect /dir/test:token
waitwatch
ackwatch token
close

# watch priority test: all simultaneous
1 watch /dir token1
3 watch /dir token3
2 watch /dir token2
write /dir/test contents
expect 3:/dir/test:token3
3 waitwatch
3 ackwatch token3
expect 2:/dir/test:token2
2 waitwatch
2 ackwatch token2
expect 1:/dir/test:token1
1 waitwatch
1 ackwatch token1
1 close
2 close
3 close

# If one dies (without acking), the other should still get ack.
1 watch /dir token1
2 watch /dir token2
write /dir/test contents
expect 2:/dir/test:token2
2 waitwatch
2 close
expect 1:/dir/test:token1
1 waitwatch
1 ackwatch token1
1 close

# If one dies (without reading at all), the other should still get ack.
1 watch /dir token1
2 watch /dir token2
write /dir/test contents
2 close
expect 1:/dir/test:token1
1 waitwatch
1 ackwatch token1
1 close
2 close

# unwatch
1 watch /dir token1
1 unwatch /dir token1
1 watch /dir token2
2 write /dir/test2 contents
expect 1:/dir/test2:token2
1 waitwatch
1 unwatch /dir token2
1 close
2 close

# unwatch while watch pending.  Other watcher still gets the event.
1 watch /dir token1
2 watch /dir token2
write /dir/test contents
2 unwatch /dir token2
expect 1:/dir/test:token1
1 waitwatch
1 ackwatch token1
1 close
2 close

# unwatch while watch pending.  Should clear this so we get next event.
1 watch /dir token1
write /dir/test contents
1 unwatch /dir token1
1 watch /dir/test token2
write /dir/test contents2
expect 1:/dir/test:token2
1 waitwatch
1 ackwatch token2

# check we only get notified once.
1 watch /test token
2 write /test contents2
expect 1:/test:token
1 waitwatch
1 ackwatch token
expect 1: waitwatch failed: Connection timed out
1 waitwatch
1 close

# watches are queued in order.
1 watch / token
2 write /test1 contents
2 write /test2 contents
2 write /test3 contents
expect 1:/test1:token
1 waitwatch
1 ackwatch token
expect 1:/test2:token
1 waitwatch
1 ackwatch token
expect 1:/test3:token
1 waitwatch
1 ackwatch token
1 close

# Creation of subpaths should be covered correctly.
1 watch / token
2 write /test/subnode contents2
2 write /test/subnode/subnode contents2
expect 1:/test/subnode:token
1 waitwatch
1 ackwatch token
expect 1:/test/subnode/subnode:token
1 waitwatch
1 ackwatch token
expect 1: waitwatch failed: Connection timed out
1 waitwatch
1 close

# Watch event must have happened before we registered interest.
1 watch / token
2 write /test/subnode contents2
1 watchnoack / token2 0
expect 1:/test/subnode:token
1 waitwatch
1 ackwatch token
expect 1:/:token2
1 waitwatch
expect 1: waitwatch failed: Connection timed out
1 waitwatch
1 close

# Rm fires notification on child.
1 watch /test/subnode token
2 rm /test
expect 1:/test/subnode:token
1 waitwatch
1 ackwatch token

# Watch should not double-send after we ack, even if we did something in between.
1 watch /test2 token
2 write /test2/foo contents2
expect 1:/test2/foo:token
1 waitwatch
expect 1:contents2
1 read /test2/foo
1 ackwatch token
expect 1: waitwatch failed: Connection timed out
1 waitwatch
