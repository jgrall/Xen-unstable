.\" Automatically generated by Pod::Man v1.37, Pod::Parser v1.14
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used to
.\" do unbreakable dashes and therefore won't be available.  \*(C` and \*(C'
.\" expand to `' in nroff, nothing in troff, for use with C<>.
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "QEMU 1"
.TH QEMU 1 "2005-05-19" " " " "
.SH "NAME"
qemu  \- QEMU System Emulator
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
usage: qemu [options] [disk_image]
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
The \s-1QEMU\s0 System emulator simulates a complete \s-1PC\s0.
.PP
In order to meet specific user needs, two versions of \s-1QEMU\s0 are
available:
.IP "1." 4
\&\f(CW\*(C`qemu\-fast\*(C'\fR uses the host Memory Management Unit (\s-1MMU\s0) to
simulate the x86 \s-1MMU\s0. It is \fIfast\fR but has limitations because
the whole 4 \s-1GB\s0 address space cannot be used and some memory mapped
peripherials cannot be emulated accurately yet. Therefore, a specific
guest Linux kernel can be used  
.Sp
Moreover there is no separation between the host and target address
spaces, so it offers no security (the target \s-1OS\s0 can modify the
\&\f(CW\*(C`qemu\-fast\*(C'\fR code by writing at the right addresses).
.IP "2." 4
\&\f(CW\*(C`qemu\*(C'\fR uses a software \s-1MMU\s0. It is about \fItwo times slower\fR
but gives a more accurate emulation and a complete separation between
the host and target address spaces.
.PP
\&\s-1QEMU\s0 emulates the following \s-1PC\s0 peripherials:
.IP "\-" 4
i440FX host \s-1PCI\s0 bridge and \s-1PIIX3\s0 \s-1PCI\s0 to \s-1ISA\s0 bridge
.IP "\-" 4
Cirrus \s-1CLGD\s0 5446 \s-1PCI\s0 \s-1VGA\s0 card or dummy \s-1VGA\s0 card with Bochs \s-1VESA\s0
extensions (hardware level, including all non standard modes).
.IP "\-" 4
\&\s-1PS/2\s0 mouse and keyboard
.IP "\-" 4
2 \s-1PCI\s0 \s-1IDE\s0 interfaces with hard disk and CD-ROM support
.IP "\-" 4
Floppy disk
.IP "\-" 4
\&\s-1NE2000\s0 \s-1PCI\s0 network adapters
.IP "\-" 4
Serial ports
.IP "\-" 4
Soundblaster 16 card
.PP
\&\s-1QEMU\s0 uses the \s-1PC\s0 \s-1BIOS\s0 from the Bochs project and the Plex86/Bochs \s-1LGPL\s0
\&\s-1VGA\s0 \s-1BIOS\s0.
.SH "OPTIONS"
.IX Header "OPTIONS"
\&\fIdisk_image\fR is a raw hard disk image for \s-1IDE\s0 hard disk 0.
.PP
General options:
.IP "\fB\-fda file\fR" 4
.IX Item "-fda file"
.PD 0
.IP "\fB\-fdb file\fR" 4
.IX Item "-fdb file"
.PD
Use \fIfile\fR as floppy disk 0/1 image  You can
use the host floppy by using \fI/dev/fd0\fR as filename.
.IP "\fB\-hda file\fR" 4
.IX Item "-hda file"
.PD 0
.IP "\fB\-hdb file\fR" 4
.IX Item "-hdb file"
.IP "\fB\-hdc file\fR" 4
.IX Item "-hdc file"
.IP "\fB\-hdd file\fR" 4
.IX Item "-hdd file"
.PD
Use \fIfile\fR as hard disk 0, 1, 2 or 3 image 
.IP "\fB\-cdrom file\fR" 4
.IX Item "-cdrom file"
Use \fIfile\fR as CD-ROM image (you cannot use \fB\-hdc\fR and and
\&\fB\-cdrom\fR at the same time). You can use the host CD-ROM by
using \fI/dev/cdrom\fR as filename.
.IP "\fB\-boot [a|c|d]\fR" 4
.IX Item "-boot [a|c|d]"
Boot on floppy (a), hard disk (c) or CD-ROM (d). Hard disk boot is
the default.
.IP "\fB\-snapshot\fR" 4
.IX Item "-snapshot"
Write to temporary files instead of disk image files. In this case,
the raw disk image you use is not written back. You can however force
the write back by pressing \fBC\-a s\fR  
.IP "\fB\-m megs\fR" 4
.IX Item "-m megs"
Set virtual \s-1RAM\s0 size to \fImegs\fR megabytes. Default is 128 \s-1MB\s0.
.IP "\fB\-nographic\fR" 4
.IX Item "-nographic"
Normally, \s-1QEMU\s0 uses \s-1SDL\s0 to display the \s-1VGA\s0 output. With this option,
you can totally disable graphical output so that \s-1QEMU\s0 is a simple
command line application. The emulated serial port is redirected on
the console. Therefore, you can still use \s-1QEMU\s0 to debug a Linux kernel
with a serial console.
.IP "\fB\-enable\-audio\fR" 4
.IX Item "-enable-audio"
The \s-1SB16\s0 emulation is disabled by default as it may give problems with
Windows. You can enable it manually with this option.
.IP "\fB\-localtime\fR" 4
.IX Item "-localtime"
Set the real time clock to local time (the default is to \s-1UTC\s0
time). This option is needed to have correct date in MS-DOS or
Windows.
.IP "\fB\-full\-screen\fR" 4
.IX Item "-full-screen"
Start in full screen.
.PP
Network options:
.IP "\fB\-n script\fR" 4
.IX Item "-n script"
Set \s-1TUN/TAP\s0 network init script [default=/etc/qemu\-ifup]. This script
is launched to configure the host network interface (usually tun0)
corresponding to the virtual \s-1NE2000\s0 card.
.IP "\fB\-macaddr addr\fR" 4
.IX Item "-macaddr addr"
Set the mac address of the first interface (the format is
aa:bb:cc:dd:ee:ff in hexa). The mac address is incremented for each
new network interface.
.IP "\fB\-tun\-fd fd\fR" 4
.IX Item "-tun-fd fd"
Assumes \fIfd\fR talks to a tap/tun host network interface and use
it. Read <\fBhttp://bellard.org/qemu/tetrinet.html\fR> to have an
example of its use.
.IP "\fB\-user\-net\fR" 4
.IX Item "-user-net"
Use the user mode network stack. This is the default if no tun/tap
network init script is found.
.IP "\fB\-tftp prefix\fR" 4
.IX Item "-tftp prefix"
When using the user mode network stack, activate a built-in \s-1TFTP\s0
server. All filenames beginning with \fIprefix\fR can be downloaded
from the host to the guest using a \s-1TFTP\s0 client. The \s-1TFTP\s0 client on the
guest must be configured in binary mode (use the command \f(CW\*(C`bin\*(C'\fR of
the Unix \s-1TFTP\s0 client). The host \s-1IP\s0 address on the guest is as usual
10.0.2.2.
.IP "\fB\-smb dir\fR" 4
.IX Item "-smb dir"
When using the user mode network stack, activate a built-in \s-1SMB\s0
server so that Windows OSes can access to the host files in \fIdir\fR
transparently.
.Sp
In the guest Windows \s-1OS\s0, the line:
.Sp
.Vb 1
\&        10.0.2.4 smbserver
.Ve
.Sp
must be added in the file \fIC:\eWINDOWS\eLMHOSTS\fR (for windows 9x/Me)
or \fIC:\eWINNT\eSYSTEM32\eDRIVERS\eETC\eLMHOSTS\fR (Windows \s-1NT/2000\s0).
.Sp
Then \fIdir\fR can be accessed in \fI\e\esmbserver\eqemu\fR.
.Sp
Note that a \s-1SAMBA\s0 server must be installed on the host \s-1OS\s0 in
\&\fI/usr/sbin/smbd\fR. \s-1QEMU\s0 was tested succesfully with smbd version
2.2.7a from the Red Hat 9.
.IP "\fB\-redir [tcp|udp]:host\-port:[guest\-host]:guest\-port\fR" 4
.IX Item "-redir [tcp|udp]:host-port:[guest-host]:guest-port"
When using the user mode network stack, redirect incoming \s-1TCP\s0 or \s-1UDP\s0
connections to the host port \fIhost-port\fR to the guest
\&\fIguest-host\fR on guest port \fIguest-port\fR. If \fIguest-host\fR
is not specified, its value is 10.0.2.15 (default address given by the
built-in \s-1DHCP\s0 server).
.Sp
For example, to redirect host X11 connection from screen 1 to guest
screen 0, use the following:
.Sp
.Vb 4
\&        # on the host
\&        qemu -redir tcp:6001::6000 [...]
\&        # this host xterm should open in the guest X11 server
\&        xterm -display :1
.Ve
.Sp
To redirect telnet connections from host port 5555 to telnet port on
the guest, use the following:
.Sp
.Vb 3
\&        # on the host
\&        qemu -redir tcp:5555::23 [...]
\&        telnet localhost 5555
.Ve
.Sp
Then when you use on the host \f(CW\*(C`telnet localhost 5555\*(C'\fR, you
connect to the guest telnet server.
.IP "\fB\-dummy\-net\fR" 4
.IX Item "-dummy-net"
Use the dummy network stack: no packet will be received by the network
cards.
.PP
Linux boot specific. When using this options, you can use a given
Linux kernel without installing it in the disk image. It can be useful
for easier testing of various kernels.
.IP "\fB\-kernel bzImage\fR" 4
.IX Item "-kernel bzImage"
Use \fIbzImage\fR as kernel image.
.IP "\fB\-append cmdline\fR" 4
.IX Item "-append cmdline"
Use \fIcmdline\fR as kernel command line
.IP "\fB\-initrd file\fR" 4
.IX Item "-initrd file"
Use \fIfile\fR as initial ram disk.
.PP
Debug/Expert options:
.IP "\fB\-serial dev\fR" 4
.IX Item "-serial dev"
Redirect the virtual serial port to host device \fIdev\fR. Available
devices are:
.RS 4
.ie n .IP """vc""" 4
.el .IP "\f(CWvc\fR" 4
.IX Item "vc"
Virtual console
.ie n .IP """pty""" 4
.el .IP "\f(CWpty\fR" 4
.IX Item "pty"
[Linux only] Pseudo \s-1TTY\s0 (a new \s-1PTY\s0 is automatically allocated)
.ie n .IP """null""" 4
.el .IP "\f(CWnull\fR" 4
.IX Item "null"
void device
.ie n .IP """stdio""" 4
.el .IP "\f(CWstdio\fR" 4
.IX Item "stdio"
[Unix only] standard input/output
.RE
.RS 4
.Sp
The default device is \f(CW\*(C`vc\*(C'\fR in graphical mode and \f(CW\*(C`stdio\*(C'\fR in
non graphical mode.
.Sp
This option can be used several times to simulate up to 4 serials
ports.
.RE
.IP "\fB\-monitor dev\fR" 4
.IX Item "-monitor dev"
Redirect the monitor to host device \fIdev\fR (same devices as the
serial port).
The default device is \f(CW\*(C`vc\*(C'\fR in graphical mode and \f(CW\*(C`stdio\*(C'\fR in
non graphical mode.
.IP "\fB\-s\fR" 4
.IX Item "-s"
Wait gdb connection to port 1234  
.IP "\fB\-p port\fR" 4
.IX Item "-p port"
Change gdb connection port.
.IP "\fB\-S\fR" 4
.IX Item "-S"
Do not start \s-1CPU\s0 at startup (you must type 'c' in the monitor).
.IP "\fB\-d\fR" 4
.IX Item "-d"
Output log in /tmp/qemu.log
.IP "\fB\-isa\fR" 4
.IX Item "-isa"
Simulate an ISA-only system (default is \s-1PCI\s0 system).
.IP "\fB\-std\-vga\fR" 4
.IX Item "-std-vga"
Simulate a standard \s-1VGA\s0 card with Bochs \s-1VBE\s0 extensions (default is
Cirrus Logic \s-1GD5446\s0 \s-1PCI\s0 \s-1VGA\s0)
.IP "\fB\-loadvm file\fR" 4
.IX Item "-loadvm file"
Start right away with a saved state (\f(CW\*(C`loadvm\*(C'\fR in monitor)
.PP
During the graphical emulation, you can use the following keys:
.IP "\fBCtrl-Alt-f\fR" 4
.IX Item "Ctrl-Alt-f"
Toggle full screen
.IP "\fBCtrl-Alt-n\fR" 4
.IX Item "Ctrl-Alt-n"
Switch to virtual console 'n'. Standard console mappings are:
.RS 4
.IP "\fI1\fR" 4
.IX Item "1"
Target system display
.IP "\fI2\fR" 4
.IX Item "2"
Monitor
.IP "\fI3\fR" 4
.IX Item "3"
Serial port
.RE
.RS 4
.RE
.IP "\fBCtrl-Alt\fR" 4
.IX Item "Ctrl-Alt"
Toggle mouse and keyboard grab.
.PP
In the virtual consoles, you can use \fBCtrl-Up\fR, \fBCtrl-Down\fR,
\&\fBCtrl-PageUp\fR and \fBCtrl-PageDown\fR to move in the back log.
.PP
During emulation, if you are using the \fB\-nographic\fR option, use
\&\fBCtrl-a h\fR to get terminal commands:
.IP "\fBCtrl-a h\fR" 4
.IX Item "Ctrl-a h"
Print this help
.IP "\fBCtrl-a x\fR" 4
.IX Item "Ctrl-a x"
Exit emulatior
.IP "\fBCtrl-a s\fR" 4
.IX Item "Ctrl-a s"
Save disk data back to file (if \-snapshot)
.IP "\fBCtrl-a b\fR" 4
.IX Item "Ctrl-a b"
Send break (magic sysrq in Linux)
.IP "\fBCtrl-a c\fR" 4
.IX Item "Ctrl-a c"
Switch between console and monitor
.IP "\fBCtrl-a Ctrl-a\fR" 4
.IX Item "Ctrl-a Ctrl-a"
Send Ctrl-a
.PP
The following options are specific to the PowerPC emulation:
.IP "\fB\-prep\fR" 4
.IX Item "-prep"
Simulate a \s-1PREP\s0 system (default is PowerMAC)
.IP "\fB\-g WxH[xDEPTH]\fR" 4
.IX Item "-g WxH[xDEPTH]"
Set the initial \s-1VGA\s0 graphic mode. The default is 800x600x15.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
The \s-1HTML\s0 documentation of \s-1QEMU\s0 for more precise information and Linux
user mode emulator invocation.
.SH "AUTHOR"
.IX Header "AUTHOR"
Fabrice Bellard
